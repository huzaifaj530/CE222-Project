$date
	Sun May 14 16:30:42 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module processor_tb $end
$var wire 32 ! alu_result [31:0] $end
$var reg 1 " clk $end
$var reg 1 # reset $end
$scope module uut $end
$var wire 3 $ alu_op [2:0] $end
$var wire 32 % alu_result [31:0] $end
$var wire 1 & alu_src $end
$var wire 1 ' branch $end
$var wire 1 ( clk $end
$var wire 32 ) data_out [31:0] $end
$var wire 3 * func3 [2:0] $end
$var wire 7 + func7 [6:0] $end
$var wire 21 , imm [20:0] $end
$var wire 32 - instruction [31:0] $end
$var wire 1 . mem_read $end
$var wire 2 / mem_to_reg [1:0] $end
$var wire 1 0 mem_write $end
$var wire 7 1 opcode [6:0] $end
$var wire 32 2 out1 [31:0] $end
$var wire 32 3 out2 [31:0] $end
$var wire 10 4 pc [9:0] $end
$var wire 5 5 r1 [4:0] $end
$var wire 5 6 r2 [4:0] $end
$var wire 5 7 rd [4:0] $end
$var wire 1 8 reg_write $end
$var wire 1 9 reset $end
$var wire 32 : result [31:0] $end
$var wire 1 ; size $end
$var wire 32 < write_data [31:0] $end
$var wire 1 = zero_flag $end
$scope module PC1 $end
$var wire 1 ' branch $end
$var wire 1 ( clk $end
$var wire 2 > mem_to_reg [1:0] $end
$var wire 21 ? offset [20:0] $end
$var wire 32 @ reg_out1 [31:0] $end
$var wire 1 9 reset $end
$var wire 1 = zero_flag $end
$var reg 10 A count [9:0] $end
$upscope $end
$scope module INSTRUCTION_MEMORY $end
$var wire 1 ( clk $end
$var wire 10 B read_addr [9:0] $end
$var reg 32 C instruction [31:0] $end
$upscope $end
$scope module DECODER $end
$var wire 1 ( clk $end
$var wire 32 D instruction [31:0] $end
$var reg 3 E func3 [2:0] $end
$var reg 7 F func7 [6:0] $end
$var reg 21 G imm [20:0] $end
$var reg 7 H opcode [6:0] $end
$var reg 5 I r1 [4:0] $end
$var reg 5 J r2 [4:0] $end
$var reg 5 K rd [4:0] $end
$var reg 1 L size $end
$upscope $end
$scope module CONTROL $end
$var wire 1 ( clk $end
$var wire 7 M opcode [6:0] $end
$var reg 3 N alu_op [2:0] $end
$var reg 1 O alu_src $end
$var reg 1 P branch $end
$var reg 1 Q mem_read $end
$var reg 2 R mem_to_reg [1:0] $end
$var reg 1 S mem_write $end
$var reg 1 T reg_write $end
$upscope $end
$scope module ALU_C $end
$var wire 1 ( clk $end
$var wire 3 U func3 [2:0] $end
$var wire 7 V func7 [6:0] $end
$var wire 7 W opcode [6:0] $end
$var reg 3 X alu_control [2:0] $end
$upscope $end
$scope module REG_FILE $end
$var wire 1 ( clk $end
$var wire 5 Y r1 [4:0] $end
$var wire 5 Z r2 [4:0] $end
$var wire 5 [ rd [4:0] $end
$var wire 1 8 wr $end
$var wire 32 \ write_data [31:0] $end
$var reg 32 ] out1 [31:0] $end
$var reg 32 ^ out2 [31:0] $end
$upscope $end
$scope module ALU_MUX $end
$var wire 1 & alu_src $end
$var wire 1 ( clk $end
$var wire 21 _ imm [20:0] $end
$var wire 32 ` reg2 [31:0] $end
$var reg 32 a out [31:0] $end
$upscope $end
$scope module ALU $end
$var wire 32 b a [31:0] $end
$var wire 3 c alu_control [2:0] $end
$var wire 32 d b [31:0] $end
$var wire 1 ( clk $end
$var reg 32 e out [31:0] $end
$var reg 1 f zero_flag $end
$upscope $end
$scope module DATA_MEMORY $end
$var wire 32 g address [31:0] $end
$var wire 1 ( clk $end
$var wire 1 . mem_rd $end
$var wire 1 0 mem_wr $end
$var wire 1 ; size $end
$var wire 32 h write_data [31:0] $end
$var reg 32 i read_data [31:0] $end
$upscope $end
$scope module MEM_MUX $end
$var wire 32 j alu_result [31:0] $end
$var wire 1 ( clk $end
$var wire 32 k mem_data [31:0] $end
$var wire 2 l mem_to_reg [1:0] $end
$var wire 10 m pc [9:0] $end
$var reg 32 n out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
xf
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
xT
xS
bx R
xQ
xP
xO
bx N
bx M
xL
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
x=
bx <
x;
bx :
19
x8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
x0
bx /
x.
bx -
bx ,
bx +
bx *
bx )
0(
x'
x&
bx %
bx $
1#
0"
bx !
$end
#1000
b0 A
b0 4
b0 B
b0 m
1L
1;
b0 K
b0 7
b0 [
b0 J
b0 6
b0 Z
b0 I
b0 5
b0 Y
b0 G
b0 ,
b0 ?
b0 _
b0 F
b0 +
b0 V
b0 E
b0 *
b0 U
0f
0=
1"
1(
#2000
0"
0(
0#
09
#3000
bx i
b100 A
b100 4
b100 B
b100 m
1"
1(
#4000
0"
0(
#5000
b1000 A
b1000 4
b1000 B
b1000 m
bx i
1"
1(
#6000
0"
0(
#7000
bx i
b1100 A
b1100 4
b1100 B
b1100 m
1"
1(
#8000
0"
0(
#9000
b10000 A
b10000 4
b10000 B
b10000 m
bx i
1"
1(
#10000
0"
0(
#11000
bx i
b10100 A
b10100 4
b10100 B
b10100 m
1"
1(
#12000
0"
0(
#13000
b11000 A
b11000 4
b11000 B
b11000 m
bx i
1"
1(
#14000
0"
0(
#15000
bx i
b11100 A
b11100 4
b11100 B
b11100 m
1"
1(
#16000
0"
0(
#17000
b100000 A
b100000 4
b100000 B
b100000 m
bx i
1"
1(
#18000
0"
0(
#19000
bx i
b100100 A
b100100 4
b100100 B
b100100 m
1"
1(
#20000
0"
0(
#21000
b101000 A
b101000 4
b101000 B
b101000 m
bx i
1"
1(
#22000
0"
0(
